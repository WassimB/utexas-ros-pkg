#!/usr/bin/env python
import roslib; roslib.load_manifest('bwi_dispatcher')
import rospy
import bwi_dispatcher.srv

class DispatcherTester():
  def __init__(self):
    self.dispatcher = rospy.get_param('~dispatcher', 'dispatcher')
    self.adRequests = []

  def showResult(self, success, test):
    if success:
      rospy.loginfo("SUCCESS: %s" % test)
    else:
      rospy.loginfo("FAIL: %s" % test)

  def advertiseDevice(self):
    service = rospy.ServiceProxy('/%s/advertise_device' % self.dispatcher, bwi_dispatcher.srv.AdvertiseNode)
    ad = bwi_dispatcher.msg.Advertisement
    ad.name = "test_application_device"
    ad.type = bwi_dispatcher.msg.AdvertisementType.PUBLISHER
    req = bwi_dispatcher.srv.AdvertiseNodeRequest()
    req.advertisements += [ad]
    req.node_name = 'dispatcher_tester'
    response = service(req)
    self.adRequests += [req]
    self.showResult(response.success, 'advertise device')

  def listTopics(self):
    service = rospy.ServiceProxy('/%s/list_topics' % self.dispatcher, bwi_dispatcher.srv.ListTopics)
    response = service()
    requestedTopics = 0
    for req in self.adRequests:
      for ad in req.advertisements:
        requestedTopics += 1
    self.showResult(requestedTopics == len(response.topics), "list topics")

if __name__ == '__main__':
  rospy.init_node('dispatcher_tester')
  tester = DispatcherTester()
  tester.advertiseDevice()
  tester.listTopics()
   
